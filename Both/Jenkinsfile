	pipeline {
		agent any

		//Configure the following environment variables before executing the Jenkins Job	
		environment {
			IntegrationFlowID = "${params.IntegrationFlowID}"
			CPIHost = "${env.CPI_HOST_BHT00}"
			CPIOAuthHost = "${env.CPI_OAUTH_HOST_BHT00}"
			CPIOAuthCredentials = "${env.CPI_OAUTH_CRED_BHT00}"	
			GITRepositoryURL  = "${env.GIT_REPO_URL_BHT00}"	
			GITRepositoryURLSSH = "${env.GIT_REPO_SSHURL_BHT00}"
			GITCredentials = "GithubCredsV2" // saved in credentials
			GITBranch = "main"
			GITFolder = "IntegrationContent/IntegrationArtefacts"
			GITComment = "Download Integration Artefacts from ${env.CPI_HOST_BHT00} in CICD pipeline"

			IntegrationPackage =  "${params.PackageID}" //"${params.PackageID}" //relevant for flows that are uploaded the first time 
			DeployFlow = true //if the flow should only be uploaded, set this to false
			DeploymentCheckRetryCounter = 20 //multiply by 3 to get the maximum deployment time
			CPIHost_TARGET = "${env.CPI_HOST_BHT8}"
			CPIOAuthHost_TARGET = "${env.CPI_OAUTH_HOST_BHT8}"
			CPIOAuthCredentials_TARGET = "${env.CPI_OAUTH_CRED_BHT8}" 
			//GITRepositoryURL = "${env.GIT_REPO_URL_BHT00}"	 // they share same repository as a central repo
			//GITCredentials = "GithubCredsV2"
			//GITBranch = "main"
			//GITFolder = "IntegrationContent/IntegrationArtefacts"
		}

		parameters {
			string(name: 'IntegrationFlowID', defaultValue: '', description: 'Integration IFlow ID')
			// add version 
			string(name: 'PackageID', defaultValue: 'TESTCICD', description: 'Package where this IFlow is supposed to be saved in target Tenant')
			string(name: 'version', defaultValue: 'active', description: 'the version of the IFlow')
			
		}

		
		stages {
			stage('download integration artefact and store it in Git') {
				steps {
					deleteDir()
					script {
						//clone repo 
						checkout([
							$class: 'GitSCM',
							branches: [[name: env.GITBranch]],
							doGenerateSubmoduleConfigurations: false,
							extensions: [
								[$class: 'RelativeTargetDirectory',relativeTargetDir: "."],
								[$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: env.GITFolder]]],
								[$class: 'CloneOption', depth: 1, shallow: true, timeout:10]
							],
							submoduleCfg: [],
							userRemoteConfigs: [[
								credentialsId: env.GITCredentials,
								url: 'https://' + env.GITRepositoryURL
							]]
						])
						
						//get token
						println("Request token");
						def token;
						try{
							def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON', 
								customHeaders : [[name: 'Authorization', value: "Basic "+env.CPIOAuthCredentials]],
								contentType: 'APPLICATION_JSON', 
								httpMode: 'POST', 
								responseHandle: 'LEAVE_OPEN', 
								timeout: 30, 
								url: 'https://' + env.CPIOAuthHost + '/oauth/token?grant_type=client_credentials';
							def jsonObjToken = readJSON text: getTokenResp.getContent()
							getTokenResp.close()
							token = "Bearer " + jsonObjToken.access_token
						} catch (Exception e) {
							error("Requesting the oauth token for Cloud Integration failed:\n${e}")
						}


						//delete the old flow content so that only the latest content gets stored
						dir(env.GITFolder + '/' + env.IntegrationFlowID){
							deleteDir();
						}

						//download and extract artefact from tenant
						println("Downloading artefact");
						def tempfile = UUID.randomUUID().toString() + ".zip";
						def cpiDownloadResponse = httpRequest acceptType: 'APPLICATION_ZIP', 
							customHeaders: [[maskValue: false, name: 'Authorization', value: token]], 
							ignoreSslErrors: false, 
							responseHandle: 'LEAVE_OPEN', 
							validResponseCodes: '100:399, 404',
							timeout: 30,  
							outputFile: tempfile,
							url: 'https://' + env.CPIHost + '/api/v1/IntegrationDesigntimeArtifacts(Id=\''+ env.IntegrationFlowID + '\',Version=\'' + params.version + '\')/$value';
						if (cpiDownloadResponse.status == 404){
							//invalid Flow ID
							error("Received http status code 404. Please check if the Artefact ID that you have provided exists on the tenant.");
						}

						def disposition = cpiDownloadResponse.headers.toString();
						def index=disposition.indexOf('filename')+9;
						def lastindex=disposition.indexOf('.zip', index);
						def filename=disposition.substring(index + 1, lastindex + 4);
						def folder=env.GITFolder + '/' + filename.substring(0, filename.indexOf('.zip'));

						try {
							fileOperations([fileUnZipOperation(filePath: tempfile, targetLocation: folder)])
						}catch(Exception excep){
							println("File Operation exception :");
							println("Error: ${excep.getMessage()}")
						}

						cpiDownloadResponse.close();

						//remove the zip
						fileOperations([fileDeleteOperation(excludes: '', includes: tempfile)])
							
						// start pushing to the other tenant from here
						println("START UPLOADING SECTION");

						//get token
						println("Requesting token from Cloud Integration tenant - UPLOAD UPDATE");
						def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON',
							contentType: 'APPLICATION_JSON',
							httpMode: 'POST',
							responseHandle: 'LEAVE_OPEN',
							timeout: 30,
							customHeaders:[[maskValue: false ,name:'Authorization', value:"Basic " + env.CPIOAuthCredentials_TARGET]],
							url: 'https://' + env.CPIOAuthHost_TARGET + '/oauth/token?grant_type=client_credentials';
				
						def jsonObjToken = readJSON text: getTokenResp.getContent() 
						def token = "Bearer " + jsonObjToken.access_token
						getTokenResp.close()

						
						
						//check if the flow already exists on the tenant
						def checkResp = httpRequest acceptType: 'APPLICATION_JSON',
							httpMode: 'GET',
							responseHandle: 'LEAVE_OPEN',
							validResponseCodes: '200,201,202,404',
							timeout: 30,
							contentType : 'APPLICATION_JSON',
							customHeaders:[[maskValue: false, name:'Authorization', value: token]],
							url: 'https://'+ env.CPIHost_TARGET +'/api/v1/IntegrationDesigntimeArtifacts(Id=\'' + env.IntegrationFlowID + '\',Version=\'' + params.version + '\')';
						
						// this httpRequest above should be checked out again because of the version check, maybe we shoouldn't version  check

						// next line is 
						//def filecontent = readFile encoding: 'Base64', file: filePath;

						println("TYPE OF FILECONTENT IS "+ tempfile.getClass());
						println("START UPLOADING SECTION");

						if (checkResp.status == 404) {
							//Upload integration flow via POST
							println("Flow does not yet exist on configured tenant.");
							//prepare upload payload
							def postPayload = '{ \"Name\": \"flowName\", \"Id": "flowId\", \"PackageId\": \"packageId\", \"ArtifactContent\":\"flowContent\"}';

							postPayload = postPayload.replace('flowName', env.IntegrationFlowID);
							postPayload = postPayload.replace('flowId', env.IntegrationFlowID);
							postPayload = postPayload.replace('packageId', env.IntegrationPackage);
							postPayload = postPayload.replace('flowContent', tempFile);
						
							//upload
							println("Uploading flow.");
							def postResp = httpRequest acceptType: 'APPLICATION_JSON',
								contentType: 'APPLICATION_JSON',
								customHeaders: [[maskValue: false, name: 'Authorization', value: token]],
								httpMode: 'POST',
								requestBody: postPayload,
								url: 'https://' + env.CPIHost_TARGET + '/api/v1/IntegrationDesigntimeArtifacts'
						} else {
							//Overwrite integration flow via PUT
							println("Flow already exists on configured tenant. Update will be performed.");
							//prepare upload payload
							def putPayload = '{ \"Name\": \"flowName\", \"ArtifactContent\": \"iflowContent\"}';
							putPayload = putPayload.replace('flowName', env.IntegrationFlowID);
							putPayload = putPayload.replace('iflowContent', filecontent);

							//upload
							println("Uploading flow.");
							def putResp = httpRequest acceptType: 'APPLICATION_JSON',
								contentType: 'APPLICATION_JSON',
								customHeaders: [[maskValue: false, name: 'Authorization', value: token]],
								timeout: 30,
								httpMode: 'PUT',
								requestBody: putPayload,
								url: 'https://' + env.CPIHost_TARGET + '/api/v1/IntegrationDesigntimeArtifacts(Id=\'' + env.IntegrationFlowID + '\',Version=\'' + params.version + '\')';
							println('END OF UPDATE');
						}
						//checkResp.close();
						println("Upload successful");
									
					}
				}
			}
		}
	}
