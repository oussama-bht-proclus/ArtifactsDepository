pipeline {
	agent any

	//Configure the following environment variables before executing the Jenkins Job	
	environment {
		IntegrationFlowID = "${params.IntegrationFlowID}"
		CPIHost = "${env.CPI_HOST_BHT00}"
		CPIOAuthHost = "${env.CPI_OAUTH_HOST_BHT00}"
		CPIOAuthCredentials = "${env.CPI_OAUTH_CRED_BHT00}"	
		GITRepositoryURL  = "${env.GIT_REPO_URL_BHT00}"	
		GITRepositoryURLSSH = "${env.GIT_REPO_SSHURL_BHT00}"
		GITCredentials = "GithubCReds" // saved in credentials
		GITBranch = "main"
		GITFolder = "IntegrationContent/IntegrationArtefacts"
		GITComment = "Download Integration Artefacts from ${env.CPI_HOST_BHT00} in CICD pipeline"
   	}

	parameters {
		string(name: 'IntegrationFlowID', defaultValue: '', description: 'Integration IFlow ID')
		// add version 
		string(name: 'version',defaultValue: 'active', description: 'the version of the IFlow')
		
	}

	
	stages {
		stage('download integration artefact and store it in Git') {
			steps {
			 	deleteDir()
				script {
					//clone repo 
					checkout([
						$class: 'GitSCM',
						branches: [[name: env.GITBranch]],
						doGenerateSubmoduleConfigurations: false,
						extensions: [
							[$class: 'RelativeTargetDirectory',relativeTargetDir: "."],
							[$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path: env.GITFolder]]]
						],
						submoduleCfg: [],
						userRemoteConfigs: [[
							credentialsId: env.GITCredentials,
							url: 'https://' + env.GITRepositoryURL
						]]
					])
					
					//get token
					println("Request token");
					def token;
					try{
						def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON', 
							customHeaders : [[name: 'Authorization', value: "Basic "+env.CPIOAuthCredentials]],
							contentType: 'APPLICATION_JSON', 
							httpMode: 'POST', 
							responseHandle: 'LEAVE_OPEN', 
							timeout: 30, 
							url: 'https://' + env.CPIOAuthHost + '/oauth/token?grant_type=client_credentials';
						def jsonObjToken = readJSON text: getTokenResp.getContent()
						token = "Bearer " + jsonObjToken.access_token
				   	} catch (Exception e) {
						error("Requesting the oauth token for Cloud Integration failed:\n${e}")
					}

					//delete the old flow content so that only the latest content gets stored
					dir(env.GITFolder + '/' + env.IntegrationFlowID){
						deleteDir();
					}

					//download and extract artefact from tenant
					println("Downloading artefact");
					def tempfile = UUID.randomUUID().toString() + ".zip";
					def cpiDownloadResponse = httpRequest acceptType: 'APPLICATION_ZIP', 
						customHeaders: [[maskValue: false, name: 'Authorization', value: token]], 
						ignoreSslErrors: false, 
						responseHandle: 'LEAVE_OPEN', 
						validResponseCodes: '100:399, 404',
						timeout: 30,  
						outputFile: tempfile,
						url: 'https://' + env.CPIHost + '/api/v1/IntegrationDesigntimeArtifacts(Id=\''+ env.IntegrationFlowID + '\',Version=\'' + params.version + '\')/$value';
					if (cpiDownloadResponse.status == 404){
						//invalid Flow ID
						error("Received http status code 404. Please check if the Artefact ID that you have provided exists on the tenant.");
					}

					def disposition = cpiDownloadResponse.headers.toString();
					def index=disposition.indexOf('filename')+9;
					def lastindex=disposition.indexOf('.zip', index);
					def filename=disposition.substring(index + 1, lastindex + 4);
					def folder=env.GITFolder + '/' + filename.substring(0, filename.indexOf('.zip'));

					try {
						fileOperations([fileUnZipOperation(filePath: tempfile, targetLocation: folder)])
					}catch(Exception excep){
						println("File Operation exception :");
						println("Error: ${excep.getMessage()}")
					}

					cpiDownloadResponse.close();

					//remove the zip
					fileOperations([fileDeleteOperation(excludes: '', includes: tempfile)])
						
					dir(folder){
						sh 'git add .'
					}

					println("Store integration artefact in Git")
					try {
                        withCredentials([sshUserPrivateKey(credentialsId: 'GIT_SSH_KEY', keyFileVariable: 'SSH_KEY_PATH', passphraseVariable: 'SSH_PASSPHRASE')]) {
                            
							// Start SSH agent and add the key
                            sh '''
                                eval `ssh-agent -s`
                                echo "$SSH_PASSPHRASE" | ssh-add $SSH_KEY_PATH
								ssh-add -l
                            '''
                            
                            // Configure git to use SSH key
                            sh 'git config core.sshCommand "ssh -i $SSH_KEY_PATH -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"'

                            // Commit and push changes
                            sh 'git diff-index --quiet HEAD || git commit -am "' + env.GITComment + '"'
                            sh 'git push ' + env.GITRepositoryURLSSH + ' HEAD:' + env.GITBranch
                        }
					} catch(Exception exception){
						println('EXCEPTION CATCHED')
                        println("Error: ${exception.getMessage()}")
					}

					

					println('Artefcat downloaded successfully !')				
				}
			}
		}
    }
	post {
		success {
			script {
				def flowID = "${params.IntegrationFlowID}"
                build job: 'Upload_Update_IFlow/main', parameters: [string(name: 'IntegrationFlowID', value: flowID)]
			}
		}
	}
}
