pipeline {
  agent any

  //Configure the following environment variables before executing the Jenkins Job
  environment {
    IntegrationFlowID = "${params.IntegrationFlowID}"
    IntegrationPackage =  "TESTCICD" //"${params.PackageID}" //relevant for flows that are uploaded the first time 
    DeployFlow = true //if the flow should only be uploaded, set this to false
    DeploymentCheckRetryCounter = 20 //multiply by 3 to get the maximum deployment time
    CPIHost = "${env.CPI_HOST_BHT8}"
    CPIOAuthHost = "${env.CPI_OAUTH_HOST_BHT8}"
    CPIOAuthCredentials = "${env.CPI_OAUTH_CRED_BHT8}" 
    GITRepositoryURL = "${env.GIT_REPO_URL_BHT00}"	
    GITCredentials = "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"
    GITBranch = "main"
    GITFolder = "IntegrationContent/IntegrationArtefacts"
  }

  parameters {
    string(name: 'IntegrationFlowID', defaultValue: '', description: 'Suite File')
  }

  stages {
    stage('Get Iflow Artifact from Git, upload to CPI Designtime and optionally Deploy') {
      steps {
		    //empty the workspace
        deleteDir()
		
        script {
		      //checkout the folder from Git
          checkout([
            $class: 'GitSCM',
            branches: [[name: env.GITBranch]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
              [$class: 'RelativeTargetDirectory', relativeTargetDir: "."],
              [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [
                [$class: 'SparseCheckoutPath', path: env.GITFolder]
              ]],
              [$class: 'CloneOption', depth: 1, shallow: true, timeout:10]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
              [
                credentialsId: env.GITCredentials,
                url: 'https://' + env.GITRepositoryURL
              ]
            ]
          ])

	        //zip the flow content 
          def folder = env.GITFolder + '/' + env.IntegrationFlowID + '/';
          def filePath = env.IntegrationFlowID + ".zip";

          zip dir: folder, glob: '', zipFile: filePath;
		
          //get token
	        println("Requesting token from Cloud Integration tenant - UPLOAD UPDATE");
	        def getTokenResp = httpRequest acceptType: 'APPLICATION_JSON',
	            contentType: 'APPLICATION_JSON',
	            httpMode: 'POST',
	            responseHandle: 'LEAVE_OPEN',
	            timeout: 30,
		          customHeaders:[[maskValue: false ,name:'Authorization', value:"Basic " + env.CPIOAuthCredentials]],
              url: 'https://' + env.CPIOAuthHost + '/oauth/token?grant_type=client_credentials';
	 
	        def jsonObjToken = readJSON text: getTokenResp.getContent() 
          def token = "Bearer " + jsonObjToken.access_token
	        getTokenResp.close()
		
	        //check if the flow already exists on the tenant
          def checkResp = httpRequest acceptType: 'APPLICATION_JSON',
            httpMode: 'GET',
            responseHandle: 'LEAVE_OPEN',
            validResponseCodes: '200,201,202,404',
            timeout: 30,
	          contentType : 'APPLICATION_JSON',
	          customHeaders:[[maskValue: false, name:'Authorization', value: token]],
            url: 'https://'+ env.CPIHost +'/api/v1/IntegrationDesigntimeArtifacts(Id=\'' + env.IntegrationFlowID + '\',Version=\'active\')';
	
          //def temp = readJSON text: checkResp.getContent() 

          def filecontent = readFile encoding: 'Base64', file: filePath;
          if (checkResp.status == 404) {
                //Upload integration flow via POST
                println("Flow does not yet exist on configured tenant.");
                //prepare upload payload
                def postPayload = '{ \"Name\": \"flowName\", \"Id": "flowId\", \"PackageId\": \"packageId\", \"ArtifactContent\":\"flowContent\"}';

                postPayload = postPayload.replace('flowName', env.IntegrationFlowID);
                postPayload = postPayload.replace('flowId', env.IntegrationFlowID);
                postPayload = postPayload.replace('packageId', env.IntegrationPackage);
                postPayload = postPayload.replace('flowContent', filecontent);
		  
                //upload
                println("Uploading flow.");
                def postResp = httpRequest acceptType: 'APPLICATION_JSON',
                  contentType: 'APPLICATION_JSON',
                  customHeaders: [
                    [maskValue: false, name: 'Authorization', value: token]
                  ],
                  httpMode: 'POST',
                  requestBody: postPayload,
                  url: 'https://d4854fbatrial.it-cpitrial05.cfapps.us10-001.hana.ondemand.com/api/v1/IntegrationDesigntimeArtifacts'
          } else {
                //Overwrite integration flow via PUT
                println("Flow already exists on configured tenant. Update will be performed.");
                //prepare upload payload
                def putPayload = '{ \"Name\": \"flowName\", \"ArtifactContent\": \"iflowContent\"}';
                putPayload = putPayload.replace('flowName', env.IntegrationFlowID);
                putPayload = putPayload.replace('iflowContent', filecontent);

                //upload
                println("Uploading flow.");
                def putResp = httpRequest acceptType: 'APPLICATION_JSON',
                  contentType: 'APPLICATION_JSON',
                  customHeaders: [
                    [maskValue: false, name: 'Authorization', value: token]
                  ],
                  httpMode: 'PUT',
                  requestBody: putPayload,
                  url: 'https://' + env.CPIHost + '/api/v1/IntegrationDesigntimeArtifacts(Id=\'' + env.IntegrationFlowID + '\',Version=\'active\')';
          }
          checkResp.close();
          println("Upload successful");
        }
      }
    }
  }
}
